{"version":3,"file":"0.3607e549fb43b9324322.hot-update.js","sources":["webpack:///src/components/pageEditor.js?27d2"],"sourcesContent":["import React, { Component, PropTypes } from 'react'\r\nimport Sortable from 'sortablejs';\r\n\r\nconst bodyCode = `\r\n    (\r\n        function el(event){\r\n            console.dir(event.srcElement.parentElement.childNodes[1].value);\r\n            event.srcElement.parentElement.innerText = event.srcElement.parentElement.childNodes[1].value;\r\n        }\r\n    )\r\n    (event)\r\n`\r\n\r\nclass PageEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.getInitialState();\r\n        this.getBody();\r\n        this.getComponents();\r\n    }\r\n\r\n    getInitialState() {\r\n        return {\r\n            innerHTML: '',\r\n            components: []\r\n        }\r\n    }\r\n\r\n    getBody() {\r\n        if(localStorage.getItem(\"templateName\") != '')\r\n            fetch('/api/templates/' + localStorage.getItem(\"templateName\"),\r\n                {\r\n                    method: 'GET',\r\n                    credentials: \"same-origin\",\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                .then(result => result.body.getReader().read())\r\n                .then(res => new TextDecoder().decode(res.value))\r\n                .then(templateText => {\r\n                    this.setState((prevstate) => {\r\n                        prevstate.innerHTML = templateText;\r\n                    });\r\n                    this.componentDidMount();\r\n                });\r\n        else {\r\n            fetch('/api/sites/' + localStorage.getItem(\"siteName\") + \"/\" + localStorage.getItem(\"pageName\"),\r\n                {\r\n                    method: 'GET',\r\n                    credentials: \"same-origin\",\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                .then(result => result.body.getReader().read())\r\n                .then(res => new TextDecoder().decode(res.value))\r\n                .then(templateText => {\r\n                    this.setState((prevstate) => {\r\n                        prevstate.innerHTML = templateText;\r\n                    });\r\n                    this.componentDidMount();\r\n                });\r\n        }\r\n    }\r\n\r\n    getComponent(componentName) {\r\n        return fetch('/api/components/' + componentName,\r\n            {\r\n                method: 'GET',\r\n                credentials: \"same-origin\",\r\n                headers: {\r\n\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t}\r\n            })\r\n            .then(result => result.body.getReader().read())\r\n            .then(res => new TextDecoder().decode(res.value));\r\n    }\r\n\r\n    getComponents() {\r\n        let self = this;\r\n        fetch('/api/components',\r\n        {\r\n            method: 'GET',\r\n            credentials: \"same-origin\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(components => {\r\n            let componentObjects;\r\n            Promise.all(components.map(name => self.getComponent(name)))\r\n            .then(componentBodies => {\r\n                let iteration = 0;\r\n                components.forEach(component => {\r\n                    componentObjects.push({\r\n                        name: component,\r\n                        body: componentBodies[iteration++]\r\n                    });\r\n                });\r\n            })\r\n            .then(() => componentObjects)\r\n            .then(components => {\r\n                self.setState(prevstate => {\r\n                    prevstate.components = components;\r\n                    return prevstate;\r\n                });\r\n                debugger;\r\n                self.componentDidMount();\r\n            })\r\n        })\r\n    }\r\n\r\n    onEndStrategy(event) {\r\n        event.item = document.createElement(\"div\");\r\n        //event.clone.className\r\n    }\r\n\r\n    componentDidMount() {\r\n        var el = document.getElementById('from');\r\n        var sortable = Sortable.create(el,\r\n        {\r\n            group: {\r\n                name: \"components\",\r\n                put: [],\r\n                pull: \"clone\",\r\n                revertClone: true\r\n            },\r\n            sort: false,\r\n            onEnd: (event) => {\r\n                console.log(event);\r\n                if(event.item.parentNode.id == \"from\") return;\r\n                event.item.innerHTML = `\r\n                    <input type=\"text\" size=\"40\">\r\n                    <button onclick=\"${bodyCode}\">закончить редактирование</button>\r\n                    `;\r\n            }\r\n        });\r\n        var eWcontainers = Array.prototype.slice.call(document.getElementsByClassName('EWcontainer'));\r\n        eWcontainers = eWcontainers.forEach(container => {\r\n            return Sortable.create(container,\r\n            {\r\n                group: {\r\n                    name: \"shared\",\r\n                    put: [ \"components\" ],\r\n                    pull: true\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    savePage() {\r\n        fetch('/api/sites/' + localStorage.getItem(\"siteName\") + \"/\" + localStorage.getItem(\"pageName\"),\r\n            {\r\n                method: 'PUT',\r\n                credentials: \"same-origin\",\r\n                body: this.saveInnerHTML()\r\n            })\r\n            .then(() => {\r\n                window.location.replace('siteEditor.html')\r\n            });\r\n    }\r\n\r\n    saveInnerHTML() {\r\n        return document.getElementById(\"EWinnerHTMLElement\").innerHTML;\r\n    }\r\n    \r\n    render() {\r\n\r\n        let components = this.state.components.map(compname => \r\n        <div id={compname.name}>{compname.name}</div>)\r\n\r\n        return <div>\r\n            <div id=\"EWinnerHTMLElement\" style={{\r\n                width: '80vw',\r\n                float: 'left'\r\n            }} dangerouslySetInnerHTML={{\r\n                __html: this.state.innerHTML\r\n            }}>\r\n            </div>\r\n            <div style={{\r\n                width: '20vw',\r\n                float: 'right',\r\n                height: '100vh'\r\n            }}>\r\n                <div id=\"from\">\r\n                    <div id=\"imageComponent\">Изображение</div>\r\n                    <div id=\"textComponent\">Текст</div>\r\n                    <div id=\"videoComponent\">Видео</div>\r\n\r\n                    <button type=\"button\" className=\"btn btn-primary\" \r\n                    onClick={this.savePage.bind(this)}>Сохранить</button>\r\n\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default PageEditor;\n\n\n// WEBPACK FOOTER //\n// src/components/pageEditor.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;;;;;AACA;AACA;AASA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AADA;AAHA;AAOA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AAHA;AAOA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AADA;AAHA;AAOA;AAAA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAHA;AAOA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAIA;AAfA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AADA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AALA;AALA;AARA;AAwBA;;;;;AAGA;;;;A","sourceRoot":""}